{"ast":null,"code":"import React from'react';import'./node.css';var Node=function Node(_ref){var _ref$node=_ref.node,row=_ref$node.row,col=_ref$node.col,isStart=_ref$node.isStart,isEnd=_ref$node.isEnd,isWall=_ref$node.isWall,handleMouseUp=_ref.handleMouseUp,handleMouseDown=_ref.handleMouseDown,handleMouseEnter=_ref.handleMouseEnter;// check if this node is start or end node then go for isWall , else this node will be converted to wall color \nvar extraClass=isStart?'node-start':isEnd?'node-end':isWall?'node-wall':'';return/*#__PURE__*/React.createElement(\"div\",{id:\"node-\".concat(row,\"-\").concat(col),className:\"node \".concat(extraClass),onMouseEnter:function onMouseEnter(){return handleMouseEnter(row,col);},onMouseDown:function onMouseDown(){return handleMouseDown(row,col);},onMouseUp:function onMouseUp(){return handleMouseUp();}});};export default Node;","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/path-finder/node/Node.js"],"names":["React","Node","node","row","col","isStart","isEnd","isWall","handleMouseUp","handleMouseDown","handleMouseEnter","extraClass"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,YAAP,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAsG,oBAAnGC,IAAmG,CAA3FC,GAA2F,WAA3FA,GAA2F,CAAtFC,GAAsF,WAAtFA,GAAsF,CAAjFC,OAAiF,WAAjFA,OAAiF,CAAxEC,KAAwE,WAAxEA,KAAwE,CAAjEC,MAAiE,WAAjEA,MAAiE,CAAvDC,aAAuD,MAAvDA,aAAuD,CAAxCC,eAAwC,MAAxCA,eAAwC,CAAvBC,gBAAuB,MAAvBA,gBAAuB,CAC/G;AACA,GAAMC,CAAAA,UAAU,CAAGN,OAAO,CAAG,YAAH,CAAkBC,KAAK,CAAG,UAAH,CAAgBC,MAAM,CAAG,WAAH,CAAiB,EAAxF,CACA,mBACI,2BAAK,EAAE,gBAAUJ,GAAV,aAAiBC,GAAjB,CAAP,CACI,SAAS,gBAAUO,UAAV,CADb,CAEI,YAAY,CAAE,8BAAMD,CAAAA,gBAAgB,CAACP,GAAD,CAAMC,GAAN,CAAtB,EAFlB,CAGI,WAAW,CAAE,6BAAMK,CAAAA,eAAe,CAACN,GAAD,CAAMC,GAAN,CAArB,EAHjB,CAII,SAAS,CAAE,2BAAMI,CAAAA,aAAa,EAAnB,EAJf,EADJ,CAWH,CAdD,CAgBA,cAAeP,CAAAA,IAAf","sourcesContent":["import React from 'react';\nimport './node.css'\n\nconst Node = ({ node: { row, col, isStart, isEnd, isWall }, handleMouseUp, handleMouseDown, handleMouseEnter }) => {\n    // check if this node is start or end node then go for isWall , else this node will be converted to wall color \n    const extraClass = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : ''\n    return (\n        <div id={`node-${row}-${col}`}\n            className={`node ${extraClass}`}\n            onMouseEnter={() => handleMouseEnter(row, col)}\n            onMouseDown={() => handleMouseDown(row, col)}\n            onMouseUp={() => handleMouseUp()}\n\n        >\n\n        </div >\n    );\n};\n\nexport default Node;"]},"metadata":{},"sourceType":"module"}