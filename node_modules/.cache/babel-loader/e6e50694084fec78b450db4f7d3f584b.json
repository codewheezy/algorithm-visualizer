{"ast":null,"code":"var swap=function swap(array,i,j){var temp=array[i];array[i]=array[j];array[j]=temp;};var bubbleSort=function bubbleSort(unsortedArray,high,animations){var swapped;do{swapped=false;for(var i=0;i<high;i++){if(unsortedArray[i]>unsortedArray[i+1]){animations.push([i,i+1]);animations.push([i,i+1]);swap(unsortedArray,i,i+1);swapped=true;}}}while(swapped===true);return unsortedArray;};export var bubbleSort_util=function bubbleSort_util(array){var animations=[];array=bubbleSort(array,array.length-1,animations);return animations;};","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/sorting/sorting-algos/bubble_sort.js"],"names":["swap","array","i","j","temp","bubbleSort","unsortedArray","high","animations","swapped","push","bubbleSort_util","length"],"mappings":"AAAA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,KAAD,CAAQC,CAAR,CAAWC,CAAX,CAAiB,CAC1B,GAAIC,CAAAA,IAAI,CAAGH,KAAK,CAACC,CAAD,CAAhB,CACAD,KAAK,CAACC,CAAD,CAAL,CAAWD,KAAK,CAACE,CAAD,CAAhB,CACAF,KAAK,CAACE,CAAD,CAAL,CAAWC,IAAX,CACH,CAJD,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,aAAD,CAAgBC,IAAhB,CAAsBC,UAAtB,CAAqC,CACpD,GAAIC,CAAAA,OAAJ,CACA,EAAG,CACCA,OAAO,CAAG,KAAV,CACA,IAAK,GAAIP,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGK,IAApB,CAA0BL,CAAC,EAA3B,CAA+B,CAC3B,GAAII,aAAa,CAACJ,CAAD,CAAb,CAAmBI,aAAa,CAACJ,CAAC,CAAG,CAAL,CAApC,CAA6C,CACzCM,UAAU,CAACE,IAAX,CAAgB,CAACR,CAAD,CAAIA,CAAC,CAAG,CAAR,CAAhB,EACAM,UAAU,CAACE,IAAX,CAAgB,CAACR,CAAD,CAAIA,CAAC,CAAG,CAAR,CAAhB,EACAF,IAAI,CAACM,aAAD,CAAgBJ,CAAhB,CAAmBA,CAAC,CAAG,CAAvB,CAAJ,CACAO,OAAO,CAAG,IAAV,CACH,CACJ,CACJ,CAVD,MAUSA,OAAO,GAAK,IAVrB,EAWA,MAAOH,CAAAA,aAAP,CACH,CAdD,CAgBA,MAAO,IAAMK,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACV,KAAD,CAAW,CACtC,GAAMO,CAAAA,UAAU,CAAG,EAAnB,CACAP,KAAK,CAAGI,UAAU,CAACJ,KAAD,CAAQA,KAAK,CAACW,MAAN,CAAe,CAAvB,CAA0BJ,UAA1B,CAAlB,CACA,MAAOA,CAAAA,UAAP,CACH,CAJM","sourcesContent":["const swap = (array, i, j) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}\n\nconst bubbleSort = (unsortedArray, high, animations) => {\n    var swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < high; i++) {\n            if (unsortedArray[i] > unsortedArray[i + 1]) {\n                animations.push([i, i + 1])\n                animations.push([i, i + 1])\n                swap(unsortedArray, i, i + 1)\n                swapped = true;\n            }\n        }\n    } while (swapped === true)\n    return unsortedArray\n}\n\nexport const bubbleSort_util = (array) => {\n    const animations = []\n    array = bubbleSort(array, array.length - 1, animations)\n    return animations\n}"]},"metadata":{},"sourceType":"module"}