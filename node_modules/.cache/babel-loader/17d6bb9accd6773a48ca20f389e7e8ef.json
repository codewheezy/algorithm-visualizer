{"ast":null,"code":"var _jsxFileName = \"/Users/uchennaibe/Desktop/algorithm-visualizer/src/sorting/Sorting.js\";\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport './sorting.css';\nimport { mergeSort_util } from './sorting-algos/merge_sort';\nimport { bubbleSort_util } from './sorting-algos/bubble_sort';\nimport { quickSort_util } from './sorting-algos/quickSort';\nimport { insertionSort_util } from './sorting-algos/insertionSort';\nimport useWindowSize from '../hooks/windowResize';\nimport { toast } from 'react-toastify';\nimport { variants } from '../framer motion/variants'; // Change this value for the speed of the animations.\n// const ANIMATION_SPEED_MS = 100;\n// This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'yellow'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'green';\ntoast.configure();\n\nconst Sorting = () => {\n  const [array, setArray] = useState('');\n  const [arraySize, setArraySize] = useState(30); //const [active, setActive] = useState('');\n\n  const [maxSize, setMaxSize] = useState(null);\n  const [notified, setNotified] = useState(false);\n  const [currentSort] = useState(null);\n  const [animationSpeed, setAnimationSpeed] = useState(100);\n  var timer;\n  useEffect(() => {\n    if (window.innerWidth < 500 && !notified) {\n      toast.warn('Seems like you are using this app in mobile :( Open this app in large screen to get the best experience :)', {\n        autoClose: false\n      });\n      setNotified(true);\n    }\n\n    resetArray(arraySize);\n  }, [arraySize, maxSize]);\n  const [width] = useWindowSize();\n\n  if (width < 500 && maxSize !== 35) {\n    setArraySize(20);\n    setMaxSize(35);\n  } else if (width >= 500 && width <= 1024 && maxSize !== 50) {\n    setArraySize(30);\n    setMaxSize(50);\n  } else if (width > 1024 && maxSize !== 70) {\n    setArraySize(50);\n    setMaxSize(70);\n  }\n\n  const resetArray = arraySize => {\n    //?\n    while (timer--) {\n      window.clearTimeout(timer); // will do nothing if no timeout with id is present\n    }\n\n    clearTimeout(timer);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < arrayBars.length; i++) arrayBars[i].style.backgroundColor = '#D56031';\n\n    const temp = Array.from({\n      length: arraySize\n    }, () => Math.floor(Math.random() * 400));\n    setArray(temp);\n  };\n\n  const mergeSort_animation = () => {\n    // setCurrentSort('merge')\n    const animations = mergeSort_util(array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2; // comparison\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR; // showing comparison\n\n        timer = setTimeout(() => {\n          barOneStyle.backgroundColor = `${color}`;\n          barTwoStyle.backgroundColor = `${color}`;\n        }, i * animationSpeed);\n      } else {\n        // for swapping\n        timer = setTimeout(() => {\n          let [barOneIdx, newHeight] = animations[i];\n          let barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n    }\n  };\n\n  const sort_animation = animations => {\n    setTimeout(() => {\n      console.log(\"wait\");\n    }, 500);\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (var i = 0; i < animations.length; i++) {\n      const [barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      const color = i % 2 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\n      const swap = i % 2;\n      timer = setTimeout(() => {\n        const barOneHeight = barOneStyle.height;\n        const barTwoHeight = barTwoStyle.height;\n\n        if (swap) {\n          barOneStyle.height = barTwoHeight;\n          barTwoStyle.height = barOneHeight;\n        }\n\n        barOneStyle.backgroundColor = `${color}`;\n        barTwoStyle.backgroundColor = `${color}`;\n      }, i * animationSpeed);\n    }\n  };\n\n  const bubbleSort_animation = () => {\n    const animations = bubbleSort_util(array);\n    sort_animation(animations);\n  };\n\n  const quickSort_animation = () => {\n    const animations = quickSort_util(array);\n    sort_animation(animations); // setCurrentSort('quick')\n  };\n\n  const insertionSort_animation = () => {\n    const animations = insertionSort_util(array);\n    sort_animation(animations); // setCurrentSort('insertion')\n  };\n\n  return /*#__PURE__*/React.createElement(motion.div, {\n    className: \"sorting\",\n    variants: variants,\n    initial: \"hidden\",\n    animate: \"visible\",\n    exit: \"exit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sorting__navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"util__buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => resetArray(arraySize),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Reset \"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"Start Timer\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sorting-types__buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: currentSort === 'bubble' ? 'sorting__button-active' : null,\n    onClick: () => {\n      bubbleSort_animation();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: currentSort === 'merge' ? 'sorting__button-active' : null,\n    onClick: () => mergeSort_animation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: currentSort === 'quick' ? 'sorting__button-active' : null,\n    onClick: () => quickSort_animation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: currentSort === 'insertion' ? 'sorting__button-active' : null,\n    onClick: () => insertionSort_animation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"Insertion Sort\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: \"30\",\n    max: maxSize,\n    step: \"1\",\n    value: arraySize,\n    onChange: e => {\n      setArraySize(e.target.value);\n    },\n    className: \"arraySize-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sorting__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sorting__array\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, array && array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"array-bar\",\n    key: idx,\n    style: {\n      height: `${value}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Sorting;","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/sorting/Sorting.js"],"names":["React","useState","useEffect","motion","mergeSort_util","bubbleSort_util","quickSort_util","insertionSort_util","useWindowSize","toast","variants","PRIMARY_COLOR","SECONDARY_COLOR","configure","Sorting","array","setArray","arraySize","setArraySize","maxSize","setMaxSize","notified","setNotified","currentSort","animationSpeed","setAnimationSpeed","timer","window","innerWidth","warn","autoClose","resetArray","width","clearTimeout","arrayBars","document","getElementsByClassName","i","length","style","backgroundColor","temp","Array","from","Math","floor","random","mergeSort_animation","animations","isColorChange","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","setTimeout","barOneIdx","newHeight","height","sort_animation","console","log","swap","barOneHeight","barTwoHeight","bubbleSort_animation","quickSort_animation","insertionSort_animation","e","target","value","map","idx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion'\nimport './sorting.css'\nimport { mergeSort_util } from './sorting-algos/merge_sort';\nimport { bubbleSort_util } from './sorting-algos/bubble_sort';\nimport { quickSort_util } from './sorting-algos/quickSort';\nimport { insertionSort_util } from './sorting-algos/insertionSort';\nimport useWindowSize from '../hooks/windowResize';\nimport { toast } from 'react-toastify'\nimport { variants } from '../framer motion/variants';\n// Change this value for the speed of the animations.\n// const ANIMATION_SPEED_MS = 100;\n\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'yellow';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'green';\n\n\n\ntoast.configure()\nconst Sorting = () => {\n    const [array, setArray] = useState('')\n    const [arraySize, setArraySize] = useState(30)\n    //const [active, setActive] = useState('');\n    const [maxSize, setMaxSize] = useState(null)\n    const [notified, setNotified] = useState(false)\n    const [currentSort] = useState(null)\n    const [animationSpeed, setAnimationSpeed] = useState(100)\n    var timer;\n\n    useEffect(() => {\n        if (window.innerWidth < 500 && !notified) {\n            toast.warn('Seems like you are using this app in mobile :( Open this app in large screen to get the best experience :)',\n                { autoClose: false })\n            setNotified(true)\n        }\n        resetArray(arraySize)\n    }, [arraySize, maxSize])\n    const [width] = useWindowSize()\n    if (width < 500 && maxSize !== 35) {\n        setArraySize(20)\n        setMaxSize(35)\n    }\n    else if (width >= 500 && width <= 1024 && maxSize !== 50) {\n        setArraySize(30)\n        setMaxSize(50)\n\n    }\n    else if (width > 1024 && maxSize !== 70) {\n        setArraySize(50)\n        setMaxSize(70)\n    }\n\n\n    const resetArray = arraySize => {\n        //?\n        while (timer--) {\n            window.clearTimeout(timer); // will do nothing if no timeout with id is present\n        }\n        clearTimeout(timer)\n        const arrayBars = document.getElementsByClassName('array-bar')\n        for (let i = 0; i < arrayBars.length; i++)\n            arrayBars[i].style.backgroundColor = '#D56031'\n        const temp = Array.from({ length: arraySize }, () => Math.floor(Math.random() * 400));\n        setArray(temp)\n    }\n\n\n    const mergeSort_animation = () => {\n        // setCurrentSort('merge')\n        const animations = mergeSort_util(array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName(\"array-bar\")\n            const isColorChange = i % 3 !== 2 // comparison\n            if (isColorChange) {\n                const [barOneIndex, barTwoIndex] = animations[i]\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR\n\n                // showing comparison\n                timer = setTimeout(() => {\n                    barOneStyle.backgroundColor = `${color}`\n                    barTwoStyle.backgroundColor = `${color}`\n                }, i * animationSpeed)\n            } else {\n                // for swapping\n                timer = setTimeout(() => {\n                    let [barOneIdx, newHeight] = animations[i]\n                    let barOneStyle = arrayBars[barOneIdx].style\n                    barOneStyle.height = `${newHeight}px`\n                }, i * animationSpeed)\n            }\n\n        }\n    }\n    const sort_animation = (animations) => {\n        setTimeout(() => {\n            console.log(\"wait\");\n        }, 500)\n        const arrayBars = document.getElementsByClassName('array-bar')\n        for (var i = 0; i < animations.length; i++) {\n            const [barOneIndex, barTwoIndex] = animations[i]\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            const color = i % 2 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR\n            const swap = i % 2\n            timer = setTimeout(() => {\n                const barOneHeight = barOneStyle.height\n                const barTwoHeight = barTwoStyle.height\n                if (swap) {\n                    barOneStyle.height = barTwoHeight\n                    barTwoStyle.height = barOneHeight\n                }\n                barOneStyle.backgroundColor = `${color}`\n                barTwoStyle.backgroundColor = `${color}`\n\n\n            }, i * animationSpeed)\n        }\n\n\n    }\n    const bubbleSort_animation = () => {\n        const animations = bubbleSort_util(array)\n        sort_animation(animations);\n    }\n    const quickSort_animation = () => {\n        const animations = quickSort_util(array)\n        sort_animation(animations);\n        // setCurrentSort('quick')\n\n\n    }\n    const insertionSort_animation = () => {\n\n        const animations = insertionSort_util(array);\n        sort_animation(animations);\n        // setCurrentSort('insertion')\n    }\n\n    return (\n        <motion.div className=\"sorting\"\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n        >\n            <div className=\"sorting__navbar\">\n                <div className=\"util__buttons\">\n                    <button onClick={() => resetArray(arraySize)}>Reset </button>\n                    <button>Start Timer</button>\n                </div>\n                <div className=\"sorting-types__buttons\">\n                    <button className={currentSort === 'bubble' ? 'sorting__button-active' : null} onClick={() => {\n                        bubbleSort_animation()\n                    }\n                    }\n                    >Bubble Sort</button>\n                    <button className={currentSort === 'merge' ? 'sorting__button-active' : null} onClick={() => mergeSort_animation()}>Merge Sort</button>\n                    <button className={currentSort === 'quick' ? 'sorting__button-active' : null} onClick={() => quickSort_animation()}>Quick Sort</button>\n                    <button className={currentSort === 'insertion' ? 'sorting__button-active' : null} onClick={() => insertionSort_animation()}>Insertion Sort</button>\n                </div>\n                <input type=\"range\" min=\"30\" max={maxSize} step=\"1\"\n                    value={arraySize}\n                    onChange={(e) => {\n                        setArraySize(e.target.value)\n                    }}\n                    className=\"arraySize-slider\" />\n\n            </div>\n            {/* //sorting------------ */}\n            <div className='sorting__container'>\n                <div className=\"sorting__array\">\n                    {array && array.map((value, idx) =>\n                        <div className=\"array-bar\" key={idx}\n                            style={{ height: `${value}px` }}  >\n\n                        </div>\n                    )}\n                </div>\n            </div>\n\n        </motion.div>\n    );\n};\n\nexport default Sorting; "]},"metadata":{},"sourceType":"module"}