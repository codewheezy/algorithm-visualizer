{"ast":null,"code":"const swap = (array, i, j) => {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nconst bubbleSort = (unsortedArray, high, animations) => {\n  var swapped;\n\n  do {\n    swapped = false;\n\n    for (let i = 0; i < high; i++) {\n      if (unsortedArray[i] > unsortedArray[i + 1]) {\n        animations.push([i, i + 1]);\n        animations.push([i, i + 1]);\n        swap(unsortedArray, i, i + 1);\n        swapped = true;\n      }\n    }\n  } while (swapped === true);\n\n  return unsortedArray;\n};\n\nexport const bubbleSort_util = array => {\n  const animations = [];\n  array = bubbleSort(array, array.length - 1, animations);\n  return animations;\n};","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/sorting/sorting-algos/bubble_sort.js"],"names":["swap","array","i","j","temp","bubbleSort","unsortedArray","high","animations","swapped","push","bubbleSort_util","length"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,KAAiB;AAC1B,MAAIC,IAAI,GAAGH,KAAK,CAACC,CAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,EAAAA,KAAK,CAACE,CAAD,CAAL,GAAWC,IAAX;AACH,CAJD;;AAMA,MAAMC,UAAU,GAAG,CAACC,aAAD,EAAgBC,IAAhB,EAAsBC,UAAtB,KAAqC;AACpD,MAAIC,OAAJ;;AACA,KAAG;AACCA,IAAAA,OAAO,GAAG,KAAV;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,IAApB,EAA0BL,CAAC,EAA3B,EAA+B;AAC3B,UAAII,aAAa,CAACJ,CAAD,CAAb,GAAmBI,aAAa,CAACJ,CAAC,GAAG,CAAL,CAApC,EAA6C;AACzCM,QAAAA,UAAU,CAACE,IAAX,CAAgB,CAACR,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACAM,QAAAA,UAAU,CAACE,IAAX,CAAgB,CAACR,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACAF,QAAAA,IAAI,CAACM,aAAD,EAAgBJ,CAAhB,EAAmBA,CAAC,GAAG,CAAvB,CAAJ;AACAO,QAAAA,OAAO,GAAG,IAAV;AACH;AACJ;AACJ,GAVD,QAUSA,OAAO,KAAK,IAVrB;;AAWA,SAAOH,aAAP;AACH,CAdD;;AAgBA,OAAO,MAAMK,eAAe,GAAIV,KAAD,IAAW;AACtC,QAAMO,UAAU,GAAG,EAAnB;AACAP,EAAAA,KAAK,GAAGI,UAAU,CAACJ,KAAD,EAAQA,KAAK,CAACW,MAAN,GAAe,CAAvB,EAA0BJ,UAA1B,CAAlB;AACA,SAAOA,UAAP;AACH,CAJM","sourcesContent":["const swap = (array, i, j) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}\n\nconst bubbleSort = (unsortedArray, high, animations) => {\n    var swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < high; i++) {\n            if (unsortedArray[i] > unsortedArray[i + 1]) {\n                animations.push([i, i + 1])\n                animations.push([i, i + 1])\n                swap(unsortedArray, i, i + 1)\n                swapped = true;\n            }\n        }\n    } while (swapped === true)\n    return unsortedArray\n}\n\nexport const bubbleSort_util = (array) => {\n    const animations = []\n    array = bubbleSort(array, array.length - 1, animations)\n    return animations\n}"]},"metadata":{},"sourceType":"module"}