{"ast":null,"code":"var _jsxFileName = \"/Users/uchennaibe/Desktop/algorithm-visualizer/src/path-finder/node/Node.js\";\nimport React from 'react';\nimport './node.css';\n\nconst Node = _ref => {\n  let {\n    node: {\n      row,\n      col,\n      isStart,\n      isEnd,\n      isWall\n    },\n    handleMouseUp,\n    handleMouseDown,\n    handleMouseEnter\n  } = _ref;\n  // check if this node is start or end node then go for isWall , else this node will be converted to wall color \n  const extraClass = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : '';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: `node-${row}-${col}`,\n    className: `node ${extraClass}`,\n    onMouseEnter: () => handleMouseEnter(row, col),\n    onMouseDown: () => handleMouseDown(row, col),\n    onMouseUp: () => handleMouseUp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default Node;","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/path-finder/node/Node.js"],"names":["React","Node","node","row","col","isStart","isEnd","isWall","handleMouseUp","handleMouseDown","handleMouseEnter","extraClass"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,QAAsG;AAAA,MAArG;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,GAAP;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA,KAArB;AAA4BC,MAAAA;AAA5B,KAAR;AAA8CC,IAAAA,aAA9C;AAA6DC,IAAAA,eAA7D;AAA8EC,IAAAA;AAA9E,GAAqG;AAC/G;AACA,QAAMC,UAAU,GAAGN,OAAO,GAAG,YAAH,GAAkBC,KAAK,GAAG,UAAH,GAAgBC,MAAM,GAAG,WAAH,GAAiB,EAAxF;AACA,sBACI;AAAK,IAAA,EAAE,EAAG,QAAOJ,GAAI,IAAGC,GAAI,EAA5B;AACI,IAAA,SAAS,EAAG,QAAOO,UAAW,EADlC;AAEI,IAAA,YAAY,EAAE,MAAMD,gBAAgB,CAACP,GAAD,EAAMC,GAAN,CAFxC;AAGI,IAAA,WAAW,EAAE,MAAMK,eAAe,CAACN,GAAD,EAAMC,GAAN,CAHtC;AAII,IAAA,SAAS,EAAE,MAAMI,aAAa,EAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAWH,CAdD;;AAgBA,eAAeP,IAAf","sourcesContent":["import React from 'react';\nimport './node.css'\n\nconst Node = ({ node: { row, col, isStart, isEnd, isWall }, handleMouseUp, handleMouseDown, handleMouseEnter }) => {\n    // check if this node is start or end node then go for isWall , else this node will be converted to wall color \n    const extraClass = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : ''\n    return (\n        <div id={`node-${row}-${col}`}\n            className={`node ${extraClass}`}\n            onMouseEnter={() => handleMouseEnter(row, col)}\n            onMouseDown={() => handleMouseDown(row, col)}\n            onMouseUp={() => handleMouseUp()}\n\n        >\n\n        </div >\n    );\n};\n\nexport default Node;"]},"metadata":{},"sourceType":"module"}