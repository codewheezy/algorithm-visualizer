{"ast":null,"code":"export const getNodesInShortestPathOrder = endNode => {\n  let nodesInShortestPathOrder = [];\n  let currentNode = endNode;\n\n  while (currentNode) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n};\nexport const getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const {\n    row,\n    col\n  } = node;\n  if (col > 0 && !grid[row][col - 1].isWall) neighbors.push(grid[row][col - 1]);\n  if (row < grid.length - 1 && !grid[row + 1][col].isWall) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1 && !grid[row][col + 1].isWall) neighbors.push(grid[row][col + 1]);\n  if (row > 0 && !grid[row - 1][col].isWall) neighbors.push(grid[row - 1][col]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n};","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/algorithm-visualizer/src/path-finder/pathFinder-algos/util_functions.js"],"names":["getNodesInShortestPathOrder","endNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","getUnvisitedNeighbors","node","grid","neighbors","row","col","isWall","push","length","filter","neighbor","isVisited"],"mappings":"AAAA,OAAO,MAAMA,2BAA2B,GAAIC,OAAD,IAAa;AACpD,MAAIC,wBAAwB,GAAG,EAA/B;AACA,MAAIC,WAAW,GAAGF,OAAlB;;AACA,SAAOE,WAAP,EAAoB;AAChBD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACE,YAA1B;AACH;;AACD,SAAOH,wBAAP;AACH,CARM;AASP,OAAO,MAAMI,qBAAqB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACjD,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeJ,IAArB;AACA,MAAII,GAAG,GAAG,CAAN,IAAW,CAACH,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,EAAmBC,MAAnC,EAA2CH,SAAS,CAACI,IAAV,CAAeL,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AAC3C,MAAID,GAAG,GAAGF,IAAI,CAACM,MAAL,GAAc,CAApB,IAAyB,CAACN,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,EAAmBC,MAAjD,EAAyDH,SAAS,CAACI,IAAV,CAAeL,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AACzD,MAAIA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAiB,CAAvB,IAA4B,CAACN,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,EAAmBC,MAApD,EAA4DH,SAAS,CAACI,IAAV,CAAeL,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AAC5D,MAAID,GAAG,GAAG,CAAN,IAAW,CAACF,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,EAAmBC,MAAnC,EAA2CH,SAAS,CAACI,IAAV,CAAeL,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AAC3C,SAAOF,SAAS,CAACM,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACC,SAAvC,CAAP;AACH,CARM","sourcesContent":["export const getNodesInShortestPathOrder = (endNode) => {\n    let nodesInShortestPathOrder = []\n    let currentNode = endNode\n    while (currentNode) {\n        nodesInShortestPathOrder.unshift(currentNode)\n        currentNode = currentNode.previousNode\n    }\n    return nodesInShortestPathOrder\n}\nexport const getUnvisitedNeighbors = (node, grid) => {\n    const neighbors = []\n    const { row, col } = node\n    if (col > 0 && !grid[row][col - 1].isWall) neighbors.push(grid[row][col - 1])\n    if (row < grid.length - 1 && !grid[row + 1][col].isWall) neighbors.push(grid[row + 1][col])\n    if (col < grid[0].length - 1 && !grid[row][col + 1].isWall) neighbors.push(grid[row][col + 1])\n    if (row > 0 && !grid[row - 1][col].isWall) neighbors.push(grid[row - 1][col])\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n}\n"]},"metadata":{},"sourceType":"module"}