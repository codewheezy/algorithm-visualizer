{"version":3,"sources":["assets/15.png","assets/blogging 1.png","sidebar/Sidebar.js","framer motion/variants.js","landing/Landing.js","sorting/sorting-algos/merge_sort.js","sorting/sorting-algos/bubble_sort.js","sorting/sorting-algos/quickSort.js","hooks/windowResize.js","sorting/Sorting.js","sorting/sorting-algos/insertionSort.js","path-finder/node/Node.js","path-finder/pathFinder-algos/dijkstra.js","path-finder/pathFinder-algos/aStar.js","path-finder/pathFinder-algos/util_functions.js","path-finder/pathFinder-algos/bfs.js","path-finder/pathFinder-algos/dfs.js","path-finder/PathFinder.js","cards/ArticleCard.js","articles/Articles.js","firebase/firebase.js","feedback/Feedback.js","reports_list/ReportsList.js","p5js/P5page.js","App.js","index.js"],"names":["module","exports","Sidebar","className","to","class","href","target","rel","variants","hidden","opacity","visible","transition","delay","duration","exit","ease","Landing","div","initial","animate","Row","Col","xs","md","src","visualData","alt","coder","mergeSort_util","unsorted_array","animations","length","aux_array","slice","mergeSort","array","low","high","mid","Math","floor","main_array","i","j","k","push","merge","swap","temp","bubbleSort_util","unsortedArray","swapped","bubbleSort","quickSort","pivotIndex","pivotValue","partition","useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","toast","configure","Sorting","timer","setArray","arraySize","setArraySize","maxSize","setMaxSize","notified","setNotified","currentSort","animationSpeed","useEffect","warn","autoClose","resetArray","width","clearTimeout","arrayBars","document","getElementsByClassName","style","backgroundColor","Array","from","random","sort_animation","setTimeout","console","log","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","barOneHeight","height","barTwoHeight","quickSort_animation","quickSort_util","onClick","bubbleSort_animation","barOneIdx","newHeight","mergeSort_animation","tmp","insertionSort","insertionSort_util","insertionSort_animation","type","min","max","step","value","onChange","e","map","idx","key","Node","node","row","col","isStart","isEnd","isWall","handleMouseUp","handleMouseDown","handleMouseEnter","extraClass","id","onMouseEnter","onMouseDown","onMouseUp","getAllNodes","grid","nodes","n","f","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","isVisited","getNeighbors","heuristic","a","b","hypot","queue","includes","CURRENT_START_NODE_ROW","CURRENT_START_NODE_COL","CURRENT_END_NODE_ROW","CURRENT_END_NODE_COL","PathFinder","mainGrid","setMainGrid","mouseIsPressed","setMouseIsPressed","isStartNode","setIsStartNode","isEndNode","setIsEndNode","COLS","SET_COLS","alreadyRan","setAlreadyRan","currentAlgo","setCurrentAlgo","prevNodeIsWall","setPrevNodeIsWall","createNode","Infinity","g","h","createInitialGrid","temp_grid","currentRow","newGrid","getNewGridWallToggled","getNewStart","getNewEnd","getAnimateArray","newNode","new_node","prev_node","prevNode","resetColors","classList","remove","animateShortestPath","nodesInShortestPathOrder","getElementById","add","reRun","reArrangeGrid","algorithm","startNode","endNode","visitedNodesInOrder","success","closestNode","shift","dijkstra","openSet","closedSet","current","splice","neighbors_of_current","tempG","aStar","bfs","stack","pop","dfs","currentNode","unshift","getNodesInShortestPathOrder","undefined","info","position","animateTraversal","dark","closeButton","ArticleCard","title","description","link","Card","Header","Body","Text","Articles","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","Feedback","name","setName","about","setAbout","placeholder","required","cols","rows","preventDefault","collection","timestamp","FieldValue","serverTimestamp","ReportsList","feedbacks","setFeedbacks","orderBy","onSnapshot","snapshot","docs","doc","data","Date","toDate","toDateString","P5page","role","aria-label","App","location","useLocation","exitBeforeEnter","path","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.193f69a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/15.a127e2c3.png\";","module.exports = __webpack_public_path__ + \"static/media/blogging 1.de714044.png\";","import React from 'react';\nimport './sidebar.css'\nimport { Link } from 'react-router-dom';\n\nconst Sidebar = () => {\n    return (\n        <div className=\"sidebar__wrapper\">\n            <div className=\"sidebar\">\n                <div className=\"home\">\n                    <Link to=\"/\">\n                        <i class=\"fa fa-home\"></i>\n                    </Link>\n                </div>\n                <ul>\n                    <Link to=\"/sorting\">\n                        <li><i class=\"fa fa-signal\"></i></li>\n                    </Link>\n\n                    <Link to=\"/path-finder\">\n                        <li className=\"sidebar__link-active\">\n                            <i class=\"fa fa-search-location\"></i>\n                        </li>\n                    </Link>\n                    <Link to=\"/algorithm-art\">\n\n                        <i class=\"fa fa-rocket\"></i>\n                    </Link>\n\n                </ul>\n\n                <div className=\"sidebar__social\">\n                    <a href=\"https://github.com/Dey-Sumit/algorithm-visualizer\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i class=\"fab fa-github-alt\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Sidebar;","export const variants = {\n    hidden: {\n        opacity: 0\n    },\n    visible: {\n        opacity: 1,\n        transition: {\n            delay: 0.2, duration: 0.6,\n        }\n    },\n    exit: {\n        opacity: 0,\n        transition: {\n            ease: 'easeInOut'\n        }\n    }\n}","import React from 'react';\nimport './landing.css'\nimport { motion } from 'framer-motion'\nimport visualData from './../assets/15.png'\nimport coder from './../assets/blogging 1.png'\nimport { Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { variants } from '../framer motion/variants';\nconst Landing = () => {\n    return (\n        <motion.div\n            className=\"landing\"\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\">\n            <Row className=\"landing__first\">\n                <Col xs={12} md={6} className=\"landing__left\">\n\n                    <div className=\"landing__text\">\n                        <h6 className=\"landing__text-top\"> Get bored of algorithms :( It's actually entertaining  </h6>\n                        Welcome to <span className=\"landing__text-title\">Algorithm Playground</span>\n                        <span className=\"landing__text-sub__title\"> where we will make them dance :)</span>\n                    </div>\n\n                    <div className=\"landing__buttons\">\n                        <Link to=\"/sorting\">\n                            <button>Sort the <span className=\"strikeout\"> career</span> list</button>\n                        </Link>\n                        <Link to=\"/path-finder\">\n                            <button className=\"landing__buttons-path\">Find my\n                             <span className=\"strikeout\"> girlfriend</span> path</button>\n                        </Link>\n                    </div>\n                </Col>\n                <Col xs={12} md={6} className=\"landing__right\">\n                    <img src={visualData} alt=\"\" className=\"landing__image\" />\n                </Col>\n            </Row>\n            <h1 className=\"landing__second-header\">Who am I?</h1>\n            <Row className=\"landing__second\">\n\n                <Col xs={12} md={6} className=\"landing__left\">\n                    <img src={coder} alt=\"\" className=\"landing__image\" />\n\n                </Col>\n                <Col xs={12} md={6} className=\"landing__right\">\n                    <a href=\"https://uchenna-portfolio-weld.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <button className=\"landing__buttons-portfolio\">\n\n                            Check out my portfolio here</button>\n                    </a>\n                </Col>\n            </Row>\n\n        </motion.div>\n\n\n    );\n};\n\nexport default Landing;","//advance merge sort using auxiliary array\n\n// aux array is exact copy of the unsorted array ; \n//unpack the value from aux array and reorganize main_unsorted_array\nconst merge = (main_array, aux_array, low, mid, high, animations) => {\n\n    let i = low //traverse the left part\n    let j = mid + 1 // traverse the right part\n    let k = low //index of aux_array \n\n    while (i <= mid && j <= high) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j])\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j])\n\n        if (aux_array[i] < aux_array[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            // console.log(\"push overwh\");\n\n            animations.push([k, aux_array[i]])\n\n            main_array[k++] = aux_array[i++]\n        }\n        else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, aux_array[j]])\n\n            main_array[k++] = aux_array[j++]\n        }\n    }\n\n    while (i <= mid) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, aux_array[i]]);\n\n        main_array[k++] = aux_array[i++]\n    }\n    while (j <= high) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, aux_array[j]]);\n\n        main_array[k++] = aux_array[j++]\n    }\n    return main_array\n}\n\nconst mergeSort = (array, aux_array, low, high, animations) => {\n    if (low === high)\n        return\n    const mid = Math.floor((high + low) / 2)\n\n    mergeSort(aux_array, array, low, mid, animations)\n    mergeSort(aux_array, array, mid + 1, high, animations)\n    return merge(array, aux_array, low, mid, high, animations)\n}\n\nexport const mergeSort_util = (unsorted_array) => {\n    const animations = [] // it's a list of tuple(i,j): i, j are index where we need to show the animation(i.e: swapping,comparing)\n    if (unsorted_array.length <= 1)\n        return unsorted_array\n\n    // duplicate the array\n    const aux_array = unsorted_array.slice()\n\n    mergeSort(unsorted_array, aux_array, 0, unsorted_array.length - 1, animations)\n    // arrays are mutable so mergeSort() overwrites animation array;so return animations array \n\n    return animations\n}","const swap = (array, i, j) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}\n\nconst bubbleSort = (unsortedArray, high, animations) => {\n    var swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < high; i++) {\n            if (unsortedArray[i] > unsortedArray[i + 1]) {\n                animations.push([i, i + 1])\n                animations.push([i, i + 1])\n                swap(unsortedArray, i, i + 1)\n                swapped = true;\n            }\n        }\n    } while (swapped === true)\n    return unsortedArray\n}\n\nexport const bubbleSort_util = (array) => {\n    const animations = []\n    array = bubbleSort(array, array.length - 1, animations)\n    return animations\n}","const swap = (array, i, j) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}\n\nconst partition = (unsortedArray, low, high, animations) => {\n    const pivotIndex = high\n    const pivotValue = unsortedArray[high]\n    var i = low - 1\n    for (var j = low; j < high; j++) {\n        if (unsortedArray[j] < pivotValue) {\n            i++\n            animations.push([i, j])\n            animations.push([i, j])\n            swap(unsortedArray, i, j)\n        }\n    }\n    animations.push([i + 1, pivotIndex])\n    animations.push([i + 1, pivotIndex])\n    swap(unsortedArray, i + 1, pivotIndex)\n\n    return i + 1\n}\n\nconst quickSort = (unsortedArray, low, high, animations) => {\n\n    if (low < high) {\n        const mid = partition(unsortedArray, low, high, animations)\n        quickSort(unsortedArray, low, mid - 1, animations)\n        quickSort(unsortedArray, mid + 1, high, animations)\n    }\n    return unsortedArray\n}\n\nexport const quickSort_util = (array) => {\n    const animations = []\n    quickSort(array, 0, array.length - 1, animations)\n    return animations\n}","import { useLayoutEffect, useState } from 'react';\n\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}\nexport default useWindowSize;\n","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion'\nimport './sorting.css'\nimport { mergeSort_util } from './sorting-algos/merge_sort';\nimport { bubbleSort_util } from './sorting-algos/bubble_sort';\nimport { quickSort_util } from './sorting-algos/quickSort';\nimport { insertionSort_util } from './sorting-algos/insertionSort';\nimport useWindowSize from '../hooks/windowResize';\nimport { toast } from 'react-toastify'\nimport { variants } from '../framer motion/variants';\n// Change this value for the speed of the animations.\n// const ANIMATION_SPEED_MS = 100;\n\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'yellow';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'green';\n\n\n\ntoast.configure()\nconst Sorting = () => {\n    const [array, setArray] = useState('')\n    const [arraySize, setArraySize] = useState(30)\n    //const [active, setActive] = useState('');\n    const [maxSize, setMaxSize] = useState(null)\n    const [notified, setNotified] = useState(false)\n    const [currentSort] = useState(null)\n    const [animationSpeed] = useState(100)\n    var timer;\n\n    useEffect(() => {\n        if (window.innerWidth < 500 && !notified) {\n            toast.warn('Seems like you are using this app in mobile :( Open this app in large screen to get the best experience :)',\n                { autoClose: false })\n            setNotified(true)\n        }\n        resetArray(arraySize)\n    }, [arraySize, maxSize, notified])\n    const [width] = useWindowSize()\n    if (width < 500 && maxSize !== 35) {\n        setArraySize(20)\n        setMaxSize(35)\n    }\n    else if (width >= 500 && width <= 1024 && maxSize !== 50) {\n        setArraySize(30)\n        setMaxSize(50)\n\n    }\n    else if (width > 1024 && maxSize !== 70) {\n        setArraySize(50)\n        setMaxSize(70)\n    }\n\n\n    const resetArray = arraySize => {\n        //?\n        while (timer--) {\n            window.clearTimeout(timer); // will do nothing if no timeout with id is present\n        }\n        clearTimeout(timer)\n        const arrayBars = document.getElementsByClassName('array-bar')\n        for (let i = 0; i < arrayBars.length; i++)\n            arrayBars[i].style.backgroundColor = '#D56031'\n        const temp = Array.from({ length: arraySize }, () => Math.floor(Math.random() * 400));\n        setArray(temp)\n    }\n\n\n    const mergeSort_animation = () => {\n        // setCurrentSort('merge')\n        const animations = mergeSort_util(array)\n\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName(\"array-bar\")\n            const isColorChange = i % 3 !== 2 // comparison\n            if (isColorChange) {\n                const [barOneIndex, barTwoIndex] = animations[i]\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR\n\n                // showing comparison\n                timer = setTimeout(() => {\n                    barOneStyle.backgroundColor = `${color}`\n                    barTwoStyle.backgroundColor = `${color}`\n                }, i * animationSpeed)\n            } else {\n                // for swapping\n                timer = setTimeout(() => {\n                    let [barOneIdx, newHeight] = animations[i]\n                    let barOneStyle = arrayBars[barOneIdx].style\n                    barOneStyle.height = `${newHeight}px`\n                }, i * animationSpeed)\n            }\n\n        }\n    }\n    const sort_animation = (animations) => {\n        setTimeout(() => {\n            console.log(\"wait\");\n        }, 500)\n        const arrayBars = document.getElementsByClassName('array-bar')\n        for (var i = 0; i < animations.length; i++) {\n            const [barOneIndex, barTwoIndex] = animations[i]\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            const color = i % 2 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR\n            const swap = i % 2\n            timer = setTimeout(() => {\n                const barOneHeight = barOneStyle.height\n                const barTwoHeight = barTwoStyle.height\n                if (swap) {\n                    barOneStyle.height = barTwoHeight\n                    barTwoStyle.height = barOneHeight\n                }\n                barOneStyle.backgroundColor = `${color}`\n                barTwoStyle.backgroundColor = `${color}`\n\n\n            }, i * animationSpeed)\n        }\n\n\n    }\n    const bubbleSort_animation = () => {\n        const animations = bubbleSort_util(array)\n        sort_animation(animations);\n    }\n    const quickSort_animation = () => {\n        const animations = quickSort_util(array)\n        sort_animation(animations);\n        // setCurrentSort('quick')\n\n\n    }\n    const insertionSort_animation = () => {\n\n        const animations = insertionSort_util(array);\n        sort_animation(animations);\n        // setCurrentSort('insertion')\n    }\n\n    return (\n        <motion.div className=\"sorting\"\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n        >\n            <div className=\"sorting__navbar\">\n                <div className=\"util__buttons\">\n                    <button onClick={() => resetArray(arraySize)}>Reset </button>\n                    <button>Start Timer</button>\n                </div>\n                <div className=\"sorting-types__buttons\">\n                    <button className={currentSort === 'bubble' ? 'sorting__button-active' : null} onClick={() => {\n                        bubbleSort_animation()\n                    }\n                    }\n                    >Bubble Sort</button>\n                    <button className={currentSort === 'merge' ? 'sorting__button-active' : null} onClick={() => mergeSort_animation()}>Merge Sort</button>\n                    <button className={currentSort === 'quick' ? 'sorting__button-active' : null} onClick={() => quickSort_animation()}>Quick Sort</button>\n                    <button className={currentSort === 'insertion' ? 'sorting__button-active' : null} onClick={() => insertionSort_animation()}>Insertion Sort</button>\n                </div>\n                <input type=\"range\" min=\"30\" max={maxSize} step=\"1\"\n                    value={arraySize}\n                    onChange={(e) => {\n                        setArraySize(e.target.value)\n                    }}\n                    className=\"arraySize-slider\" />\n\n            </div>\n            {/* //sorting------------ */}\n            <div className='sorting__container'>\n                <div className=\"sorting__array\">\n                    {array && array.map((value, idx) =>\n                        <div className=\"array-bar\" key={idx}\n                            style={{ height: `${value}px` }}  >\n\n                        </div>\n                    )}\n                </div>\n            </div>\n\n        </motion.div>\n    );\n};\n\nexport default Sorting; ","const insertionSort = (array, high, animations) => {\n    for (let i = 1; i <= high; i++) {\n        let j = i - 1\n        let tmp = array[i]\n        while (j >= 0 && array[j] > tmp) {\n            array[j + 1] = array[j]\n            animations.push([j + 1, j])\n            animations.push([j + 1, j])\n            j--\n        }\n        array[j + 1] = tmp\n    }\n    return array\n}\n\nexport const insertionSort_util = (array) => {\n    const animations = []\n    array = insertionSort(array, array.length - 1, animations)\n    return animations\n}","import React from 'react';\nimport './node.css'\n\nconst Node = ({ node: { row, col, isStart, isEnd, isWall }, handleMouseUp, handleMouseDown, handleMouseEnter }) => {\n    // check if this node is start or end node then go for isWall , else this node will be converted to wall color \n    const extraClass = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : ''\n    return (\n        <div id={`node-${row}-${col}`}\n            className={`node ${extraClass}`}\n            onMouseEnter={() => handleMouseEnter(row, col)}\n            onMouseDown={() => handleMouseDown(row, col)}\n            onMouseUp={() => handleMouseUp()}\n\n        >\n\n        </div >\n    );\n};\n\nexport default Node;","export const dijkstra = (grid, startNode, endNode) => {\n    if (startNode === endNode)\n        return false\n\n    // create visitedNodesInOrder array to keep track and animate\n    const visitedNodesInOrder = []\n\n    // get all the unvisited nodes\n    var unvisitedNodes = getAllNodes(grid)\n    // set startNode distance 0\n    startNode.distance = 0\n    //TODO\n\n    while (unvisitedNodes.length) {\n        // sort unvisited ascending order and get the first value(shift())\n        sortNodesByDistance(unvisitedNodes)\n        const closestNode = unvisitedNodes.shift();\n\n        if (closestNode.distance === Infinity)\n            return { visitedNodesInOrder, success: false }\n\n        // set closest node as visited and push it to visited nodes in order\n        closestNode.isVisited = true\n        visitedNodesInOrder.push(closestNode)\n\n        if (closestNode === endNode)\n            return { visitedNodesInOrder, success: true }\n\n        // update unvisited neighbors\n        updateUnvisitedNeighbors(closestNode, grid)\n    }\n    //TODO do something when failed :(\n    console.log(\"Failed :(\");\n}\n\nconst getAllNodes = (grid) => {\n    const nodes = []\n    for (let row of grid)\n        for (let n of row)\n            nodes.push(n)\n    return nodes\n}\n\nconst sortNodesByDistance = (unvisitedNodes) => {\n\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return nodeA.distance - nodeB.distance\n    })\n}\nconst updateUnvisitedNeighbors = (node, grid) => {\n    // get unvisited neighbors\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n    for (const neighbor of unvisitedNeighbors) {\n        // increment every neighbor's distance by 1\n        neighbor.distance = node.distance + 1\n        // set neighbor's prev node  = current node\n        neighbor.previousNode = node\n    }\n}\n\nconst getUnvisitedNeighbors = (node, grid) => {\n    const neighbors = []\n    const { row, col } = node\n    if (row > 0 && !grid[row - 1][col].isWall) neighbors.push(grid[row - 1][col])\n    if (row < grid.length - 1 && !grid[row + 1][col].isWall) neighbors.push(grid[row + 1][col])\n    if (col > 0 && !grid[row][col - 1].isWall) neighbors.push(grid[row][col - 1])\n    if (col < grid[0].length - 1 && !grid[row][col + 1].isWall) neighbors.push(grid[row][col + 1])\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n}\n\nexport const getNodesInShortestPathOrder = (endNode) => {\n    let nodesInShortestPathOrder = []\n    let currentNode = endNode\n    while (currentNode) {\n        nodesInShortestPathOrder.unshift(currentNode)\n        currentNode = currentNode.previousNode\n    }\n    // console.log(nodesInShortestPathOrder);\n    return nodesInShortestPathOrder\n}","// f(n) = g(n) + h(n)\n//f[n] represents our current best guess as to\n// how short a path from start to finish can be if it goes through n.\n//gScore is the distance from start to the neighbor through current\n//\n\nexport const aStar = (grid, startNode, endNode) => {\n    console.log(\"a star called\");\n    const openSet = []\n    const closedSet = []\n    // create visitedNodesInOrder array to keep track and animate\n    const visitedNodesInOrder = []\n\n    openSet.push(startNode)\n\n    while (openSet.length > 0) {\n        // get minimum lowest f node from openSet\n        let current = openSet.sort((a, b) => a.f - b.f)[0]\n        if (current.row === endNode.row && current.col === endNode.col) {\n            //     console.log(current.previousNode, endNode.previousNode);\n            // const solution = getNodesInShortestPathOrder(current)\n            return { visitedNodesInOrder, success: true }\n        }\n        visitedNodesInOrder.push(current);\n        // remove the node from openSet\n        openSet.splice(0, 1)\n\n        closedSet.push(current)\n        var neighbors_of_current = getNeighbors(current, grid);\n        for (let neighbor of neighbors_of_current) {\n            if (!closedSet.includes(neighbor)) {\n                var tempG = current.g + 1\n\n                if (openSet.includes(neighbor)) {\n                    if (tempG < neighbor.g) {\n                        neighbor.g = tempG\n                    }\n                } else {\n                    neighbor.g = tempG;\n                    openSet.push(neighbor)\n                }\n                neighbor.h = heuristic(neighbor, endNode)\n                neighbor.f = neighbor.g + neighbor.h;\n\n                neighbor.previousNode = current\n            }\n        }\n    }\n    console.log(openSet, closedSet);\n\n}\n\nconst getNeighbors = (node, grid) => {\n    const neighbors = []\n    const { row, col } = node\n    if (row > 0 && !grid[row - 1][col].isWall) neighbors.push(grid[row - 1][col])\n    if (row < grid.length - 1 && !grid[row + 1][col].isWall) neighbors.push(grid[row + 1][col])\n    if (col > 0 && !grid[row][col - 1].isWall) neighbors.push(grid[row][col - 1])\n    if (col < grid[0].length - 1 && !grid[row][col + 1].isWall) neighbors.push(grid[row][col + 1])\n    return neighbors\n}\n\n// Euclidean distance\nconst heuristic = (a, b) => {\n    var d = Math.hypot(b.row - a.row, b.col - a.col)\n    return d\n}\n","export const getNodesInShortestPathOrder = (endNode) => {\n    let nodesInShortestPathOrder = []\n    let currentNode = endNode\n    while (currentNode) {\n        nodesInShortestPathOrder.unshift(currentNode)\n        currentNode = currentNode.previousNode\n    }\n    return nodesInShortestPathOrder\n}\nexport const getUnvisitedNeighbors = (node, grid) => {\n    const neighbors = []\n    const { row, col } = node\n    if (col > 0 && !grid[row][col - 1].isWall) neighbors.push(grid[row][col - 1])\n    if (row < grid.length - 1 && !grid[row + 1][col].isWall) neighbors.push(grid[row + 1][col])\n    if (col < grid[0].length - 1 && !grid[row][col + 1].isWall) neighbors.push(grid[row][col + 1])\n    if (row > 0 && !grid[row - 1][col].isWall) neighbors.push(grid[row - 1][col])\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n}\n","import { getUnvisitedNeighbors } from \"./util_functions\";\n\nexport const bfs = (grid, startNode, endNode) => {\n    // create visitedNodesInOrder array to keep track and animate\n    const visitedNodesInOrder = []\n    var queue = []\n    queue.push(startNode)\n\n    while (queue.length > 0) {\n        const current = queue.shift();\n        current.isVisited = true\n        visitedNodesInOrder.push(current)\n        if (current.row === endNode.row && current.col === endNode.col) {\n            console.log(\"done\");\n            return { visitedNodesInOrder, success: true }\n        }\n        updateUnvisitedNeighbors(current, grid, queue)\n    }\n    //TODO return success:false(if not found)\n    console.log(\"path not found\");\n}\n\nconst updateUnvisitedNeighbors = (node, grid, queue) => {\n    // get unvisited neighbors\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n    for (const neighbor of unvisitedNeighbors) {\n        // set neighbor's prev node  = current node\n        neighbor.previousNode = node\n        //add it to the queue\n        if (!queue.includes(neighbor))\n            queue.push(neighbor)\n    }\n}\n","import { getUnvisitedNeighbors } from \"./util_functions\";\n//? might be wrong\n// TODO check dfs algorithm if it is correct\nexport const dfs = (grid, startNode, endNode) => {\n\n    // create visitedNodesInOrder array to keep track and animate\n    const visitedNodesInOrder = []\n\n    var stack = []\n    stack.push(startNode)\n\n    while (stack.length > 0) {\n        const current = stack.pop();\n        console.log(current);\n        current.isVisited = true\n        visitedNodesInOrder.push(current)\n\n        if (current.row === endNode.row && current.col === endNode.col) {\n            console.log(current.previousNode, endNode.previousNode);\n            return { visitedNodesInOrder, success: true }\n        }\n        updateUnvisitedNeighbors(current, grid, stack)\n    }\n    //TODO if success:false\n    console.log(\"path not found\");\n}\n\nconst updateUnvisitedNeighbors = (node, grid, queue) => {\n    // get unvisited neighbors\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n    for (const neighbor of unvisitedNeighbors) {\n        // set neighbor's prev node  = current node\n        neighbor.previousNode = node\n        //add it to the queue\n        if (!queue.includes(neighbor))\n            queue.push(neighbor)\n    }\n}","import React, { useEffect, useState } from 'react';\nimport Node from './node/Node';\nimport './pathFinder.css'\nimport { getNodesInShortestPathOrder, dijkstra } from './pathFinder-algos/dijkstra';\nimport { aStar } from './pathFinder-algos/aStar';\nimport { bfs } from './pathFinder-algos/bfs';\nimport { dfs } from './pathFinder-algos/dfs';\nimport { motion } from 'framer-motion'\nimport useWindowSize from '../hooks/windowResize';\nimport { toast } from 'react-toastify';\nimport { variants } from '../framer motion/variants';\n\nvar ROWS = 13;\n// var COLS = 25;\n\nvar CURRENT_START_NODE_ROW = 0;\nvar CURRENT_START_NODE_COL = 8;\nvar CURRENT_END_NODE_ROW = 8;\nvar CURRENT_END_NODE_COL = 0;\n\n\nconst PathFinder = () => {\n\n    const [mainGrid, setMainGrid] = useState([])\n    const [mouseIsPressed, setMouseIsPressed] = useState(false)\n    const [isStartNode, setIsStartNode] = useState(false);\n    const [isEndNode, setIsEndNode] = useState(false);\n    //TODO different cols for different screen\n    const [COLS, SET_COLS] = useState(15);\n    const [alreadyRan, setAlreadyRan] = useState(false); // false if the algo is running first time\n    // else if the algorithm is already ran ; set it true and remove all the node's distance\n    const [notified, setNotified] = useState(false)\n    // const [algoDone, setAlgoDone] = useState(false)\n    const [currentAlgo, setCurrentAlgo] = useState(null)\n\n    const [prevNodeIsWall, setPrevNodeIsWall] = useState(false);\n\n\n\n    const createNode = (row, col) => {\n        return {\n            row,\n            col,\n            isStart: row === CURRENT_START_NODE_ROW && col === CURRENT_START_NODE_COL,\n            isEnd: row === CURRENT_END_NODE_ROW && col === CURRENT_END_NODE_COL,\n            distance: Infinity,\n            isVisited: false,\n            previousNode: null,\n            isWall: false,\n            // for aStar algorithm\n            f: 0,\n            g: 0,\n            h: 0,\n        }\n    }\n\n    const createInitialGrid = () => {\n        let temp_grid = []\n        for (let row = 0; row < ROWS; row++) {\n            var currentRow = []\n            for (let col = 0; col < COLS; col++) {\n                currentRow.push(createNode(row, col))\n            }\n            temp_grid.push(currentRow)\n        }\n        return temp_grid\n    }\n\n    //component did mount\n    useEffect(() => {\n        if (window.innerWidth < 500 && !notified) {\n            toast.warn('Seems like you are using this app in mobile :( Open this app in large screen to get the best experience :)',\n                { autoClose: false })\n        }\n        setNotified(true)\n        setMainGrid(createInitialGrid())\n    }, [COLS, notified])\n    const [width] = useWindowSize()\n    if (width < 500 && COLS !== 15) {\n        SET_COLS(15)\n    }\n    else if (width >= 500 && width <= 1024 && COLS !== 20) {\n        SET_COLS(20)\n    }\n    else if (width > 1024 && COLS !== 25) {\n        SET_COLS(25)\n    }\n\n\n\n    //! MOUSE DOWN -> MOUSE ENTER -> MOUSE UP\n    // MOUSE DOWN : if the node is a start or end node(user wants to set a new start/end node),\n    // then we need to remove* the current start node add the new start node\n    // BUT , if it is neither a start or end node,then convert it to a wall or toggle it\n    const handleMouseDown = (row, col) => {\n        var newGrid;\n        // check if the element to be dragged is a start or end node\n        if (row === CURRENT_START_NODE_ROW && col === CURRENT_START_NODE_COL)\n            setIsStartNode(true); //set the state variable (flag)\n        else if (row === CURRENT_END_NODE_ROW && col === CURRENT_END_NODE_COL)\n            setIsEndNode(true); //set the state variable(flag)\n        else {\n            // else toggle isWall property of that node and update the mainGrid\n            newGrid = getNewGridWallToggled(mainGrid, row, col)\n            setMainGrid(newGrid)\n        }\n        // set mouseIsPressed flag is true;now if user hover over any nodes; that will converted\n        // to a start node or end node or a wall (toggled)\n        setMouseIsPressed(true)\n    }\n\n    const handleMouseEnter = (row, col) => {\n        let newGrid;\n\n        if (!mouseIsPressed) return // return if mousePressed flag is not true (down first)\n\n        if (isStartNode === true) {\n            newGrid = getNewStart(mainGrid, row, col)\n        }\n        else if (isEndNode === true)\n            newGrid = getNewEnd(mainGrid, row, col)\n        else\n            newGrid = getNewGridWallToggled(mainGrid, row, col)\n\n        // update the mainGrid\n        setMainGrid(newGrid)\n    }\n\n    // when leave the mouse , reset the flags to false\n    const handleMouseUp = () => {\n        setMouseIsPressed(false)\n\n        if ((isStartNode || isEndNode) && alreadyRan) {\n            getAnimateArray(currentAlgo)\n        }\n\n        setIsStartNode(false)\n        setIsEndNode(false)\n    }\n\n    const getNewGridWallToggled = (grid, row, col) => {\n        const newGrid = grid.slice()\n        const node = newGrid[row][col]\n        const newNode = {\n            ...node,\n            isWall: !node.isWall\n        }\n        newGrid[row][col] = newNode\n        return newGrid\n    }\n    // toggle the start when dragged\n    const getNewStart = (grid, row, col) => {\n\n        const newGrid = grid.slice()\n        const new_node = newGrid[row][col]\n        const prev_node = newGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL]\n\n        const prevNode = {\n            ...prev_node,\n            isStart: false,\n            isWall: prevNodeIsWall\n        }\n\n        setPrevNodeIsWall(new_node.isWall)\n\n        const newNode = {\n            ...new_node,\n            isWall: false,\n            isStart: true,\n        }\n        newGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL] = prevNode;\n        newGrid[row][col] = newNode\n        //  console.log(newGrid);\n\n\n        // update previous variables with current row and current col\n\n        CURRENT_START_NODE_ROW = row\n        CURRENT_START_NODE_COL = col\n\n        return newGrid\n    }\n\n    const getNewEnd = (grid, row, col) => {\n        const newGrid = grid.slice()\n        const new_node = newGrid[row][col]\n        const prev_node = newGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL]\n        //previous node\n        const prevNode = {\n            ...prev_node,\n            isEnd: false,\n            isWall: prevNodeIsWall\n        }\n        setPrevNodeIsWall(new_node.isWall)\n\n        const newNode = {\n            ...new_node,\n            isWall: false,\n            isEnd: true,\n        }\n        newGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL] = prevNode;\n        newGrid[row][col] = newNode\n\n        // update previous variables with current row and current col\n\n        CURRENT_END_NODE_ROW = row\n        CURRENT_END_NODE_COL = col\n        return newGrid\n    }\n\n    const reArrangeGrid = (grid) => {\n        // make sure don't reset the walls\n        const newGrid = grid.slice()\n        let node;\n        for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                node = newGrid[row][col]\n                const newNode = {\n                    ...node,\n                    distance: Infinity,\n                    isVisited: false,\n                    previousNode: null\n                }\n                newGrid[row][col] = newNode\n            }\n        }\n        return newGrid\n    }\n\n    const resetColors = () => {\n        const nodes = document.getElementsByClassName(\"node\");\n        for (let i = 0; i < nodes.length; i++) {\n            nodes[i].classList.remove(\"node-visited\")\n            nodes[i].classList.remove(\"node-shortest-path\")\n        }\n    }\n\n    const resetGrid = () => {\n        setMainGrid(createInitialGrid())\n        resetColors()\n\n    }\n    const animateShortestPath = (nodesInShortestPathOrder) => {\n\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n\n            setTimeout(() => {\n                const { row, col } = nodesInShortestPathOrder[i]\n                document.getElementById(`node-${row}-${col}`).classList.add('node-shortest-path')\n\n            }, i * 100)\n        }\n\n    }\n    const animateTraversal = (visitedNodesInOrder, nodesInShortestPathOrder = undefined) => {\n        for (let i = 0; i < visitedNodesInOrder.length; i++) {\n\n            setTimeout(() => {\n                if (i === visitedNodesInOrder.length - 1) {\n                    if (nodesInShortestPathOrder)\n                        animateShortestPath(nodesInShortestPathOrder)\n                }\n            }, i * 20)\n            setTimeout(() => {\n                const { row, col } = visitedNodesInOrder[i]\n                document.getElementById(`node-${row}-${col}`).classList.add('node-visited')\n            }, i * 20)\n\n        }\n        if (!nodesInShortestPathOrder) {\n            toast.info('No path found 🐹', {\n                position: 'top-center'\n            })\n        }\n    }\n    //TODO Re Re Re Re Re ................... rename the functions :(\n    const reRun = () => {\n        resetColors();\n        setMainGrid(reArrangeGrid(mainGrid));\n    }\n    //TODO notify when path is not found \n\n    const getAnimateArray = (algorithm) => {\n        var startNode, endNode, visitedNodesInOrder, success;\n        if (algorithm === 'dijkstra') {\n            if (alreadyRan) {\n                reRun()\n            }\n            startNode = mainGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL]\n            endNode = mainGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL];\n\n            // object destructuring and store in already defined variables\n            ({ visitedNodesInOrder, success } = dijkstra(mainGrid, startNode, endNode))\n            setAlreadyRan(true);\n            setCurrentAlgo('dijkstra')\n\n        }\n        else if (algorithm === 'aStar') {\n            if (alreadyRan) {\n                reRun()\n            }\n            startNode = mainGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL]\n            endNode = mainGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL];\n\n            ({ visitedNodesInOrder, success } = aStar(mainGrid, startNode, endNode))\n            setAlreadyRan(true);\n            setCurrentAlgo('aStar')\n\n        }\n        else if (algorithm === 'BFS') {\n            if (alreadyRan) {\n                reRun()\n            }\n            startNode = mainGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL]\n            endNode = mainGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL];\n\n            ({ visitedNodesInOrder, success } = bfs(mainGrid, startNode, endNode))\n            setAlreadyRan(true);\n            setCurrentAlgo('BFS')\n\n        }\n\n        else if (algorithm === 'DFS') {\n            if (alreadyRan) {\n                reRun()\n            }\n            startNode = mainGrid[CURRENT_START_NODE_ROW][CURRENT_START_NODE_COL]\n            endNode = mainGrid[CURRENT_END_NODE_ROW][CURRENT_END_NODE_COL];\n\n            ({ visitedNodesInOrder, success } = dfs(mainGrid, startNode, endNode))\n            setAlreadyRan(true);\n            setCurrentAlgo('DFS')\n\n        }\n\n        //console.log(visitedNodesInOrder, success);\n        var nodesInShortestPathOrder;\n\n        if (success) {\n            nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\n        }\n        animateTraversal(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    return (\n        <motion.div className=\"pathFinder\"\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n        >\n            <div className=\"pathFinder__navbar\">\n                <div className=\"util__buttons\">\n                    <button onClick={() => resetGrid()}>Clear Board</button>\n                    <button onClick={() => toast.dark('⛔ Not implemented yet', {\n                        position: 'top-center',\n                        closeButton: false,\n                        autoClose: 3000\n                    })}>Start Timer</button>\n                </div>\n                <div className=\"pathFinder__types\">\n                    <button className={currentAlgo === 'aStar' ? 'pathFinder__button-active' : null} onClick={() => getAnimateArray('aStar')}> A-star</button>\n                    <button className={currentAlgo === 'dijkstra' ? 'pathFinder__button-active' : null} onClick={() => getAnimateArray('dijkstra')}>Dijkstra </button>\n                    <button className={currentAlgo === 'DFS' ? 'pathFinder__button-active' : null} onClick={() => getAnimateArray('DFS')}>DFS</button>\n                    <button className={currentAlgo === 'BFS' ? 'pathFinder__button-active' : null} onClick={() => getAnimateArray('BFS')}>BFS</button>\n                </div>\n            </div>\n            <div className=\"pathFinder__container\">\n\n                <div className=\"pathFinder__grid\">\n                    {\n                        mainGrid.map(\n                            (row, j) => <div className=\"grid__row\" key={j}>\n                                {row.map((node, i) =>\n                                    <Node key={i} node={node}\n                                        handleMouseUp={handleMouseUp}\n                                        handleMouseDown={handleMouseDown}\n                                        handleMouseEnter={handleMouseEnter} />\n                                )}\n                            </div>\n                        )\n                    }\n                </div>\n                <div className=\"indicators\">\n                    <div className=\"start\">\n                        <i class=\"fas fa-car mr-2\"></i>\n                        <strong>Start Node</strong>\n                    </div>\n                    <div className=\"end\">\n                        <i class=\"fas fa-flag-checkered mr-2\"></i>\n                        <strong>End Node</strong>\n                    </div>\n\n                    <div className=\"wall\">\n                        <div className=\"wall__icon\"></div>\n                        <strong>Wall</strong>\n                    </div>\n                    <div className=\"shortestPath\">\n                        <div className=\"path__icon\"></div>\n                        <strong>Shortest Path</strong>\n                    </div>\n                    <div className=\"visited\">\n                        <div className=\"visited__icon\"></div>\n                        <strong>Visited Node</strong>\n                    </div>\n                </div>\n            </div>\n        </motion.div>\n    );\n};\n\nexport default PathFinder;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst ArticleCard = ({ title, description, link, color }) => {\n    return (\n        <div>\n            <a href={link}>\n                <Card className=\"card_c mb-2\" style={{ backgroundColor: `${color}` }}>\n                    <Card.Header>{title}</Card.Header>\n                    <Card.Body>\n\n                        <Card.Text>\n                            {description.slice(0, 45) + '...'}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </a>\n        </div>\n\n    );\n};\n\nexport default ArticleCard;","import React from 'react';\nimport ArticleCard from '../cards/ArticleCard';\nimport './articles.css'\nconst Articles = () => {\n    return (\n        <div className=\"articles__wrapper\">\n            <div className=\"articles\">\n                <h5 className=\"text-center mb-4\">Popular Articles</h5>\n                <ArticleCard color=\"#D452FD\" title=\"Going Broad In A Graph: BFS Traversal\" description=\"Throughout the course of this series, we’ve made connections between things.\"\n                    link=\"https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255\"\n\n                />\n                <ArticleCard color=\"#D56031\"\n\n                    title=\"the most efficient sorting algorithm ?\"\n                    description=\"Bubble Sort vs Selection Sort vs Quick Sort. Write anything else that you can think of ?\"\n                    link=\"https://www.youth4work.com/Talent/analysis-of-algorithms/Forum/116021-which-is-the-most-efficient-sorting-algorithm\"\n\n                />\n                <ArticleCard color=\"#32B777\" title=\"Algorithms That Helped Define Mathematics\"\n                    description=\"Algorithms can be found in many fields in science. Having a long history, some are more influential than others.\"\n                    link=\"https://interestingengineering.com/15-of-the-most-important-algorithms-that-helped-define-mathematics-computing-and-physics\"\n\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Articles;","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyADzK3Y1rSI-tg47CB3_rVg1JyNAyioCQw\",\n    authDomain: \"visual-algorithm.firebaseapp.com\",\n    databaseURL: \"https://visual-algorithm.firebaseio.com\",\n    projectId: \"visual-algorithm\",\n    storageBucket: \"visual-algorithm.appspot.com\",\n    messagingSenderId: \"422609339633\",\n    appId: \"1:422609339633:web:02a19ef7311cdb03ab5550\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();","import React, { useState } from 'react';\nimport { db } from '../firebase/firebase';\nimport firebase from 'firebase'\nimport './feedback.css'\nconst Feedback = () => {\n\n    const [name, setName] = useState('')\n    const [about, setAbout] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(name, about);\n        db.collection(\"feedbacks\").add(\n            {\n                name: name,\n                about: about,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            }\n        )\n        setName('')\n        setAbout('')\n    }\n    return (\n        <div className=\"feedback__form\">\n            <textarea name=\"\" className=\"form__textField\"\n                placeholder=\" Hey did you enjoy the app?🍧 Leave your feedback here...\n                If you found any bug, please report it here ,that will be highly appreciated \"\n\n                required cols=\"90\" rows=\"3\" value={about} onChange={(e) => setAbout(e.target.value)}></textarea>\n            <div className=\"form__dummyDiv\">\n                <input type=\"text\" className=\"form__input\"\n                    placeholder=\"Your Name 😎 or be anonymous\"\n                    value={name} onChange={e => setName(e.target.value)} />\n                <button className=\"form__button\" onClick={handleSubmit}>Add</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Feedback;","import React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { db } from '../firebase/firebase';\nimport './reportsList.css'\n\n\n\nconst ReportsList = () => {\n\n    const [feedbacks, setFeedbacks] = useState([])\n    useEffect(() => {\n        db.collection('feedbacks').orderBy('timestamp', 'desc')\n            .onSnapshot(snapshot => {\n                setFeedbacks(snapshot.docs.map(doc =>\n                    ({\n                        id: doc.id,\n                        data: doc.data()\n                    })\n                ))\n            })\n    }, [])\n\n\n    return (\n        <div className=\"reportedList\">\n            {\n                feedbacks.map(({ id, data: { name, about, timestamp } }) =>\n                    <Card className=\"feedbackCard\" key={id}>\n                        <Card.Header className=\"feedbackCard__header\">{name ? name : \"Anonymous\"}{' '}\n                            <small className=\"ml-2\">{new Date(timestamp?.toDate()).toDateString()}</small></Card.Header>\n                        <Card.Body className=\"feedback__body\">\n                            {about}\n                        </Card.Body>\n                    </Card>\n                )\n            }\n        </div>\n    )\n};\n\nexport default ReportsList;","import React from 'react';\nimport './p5page.css'\nimport { motion } from 'framer-motion'\nimport Feedback from '../feedback/Feedback';\nimport ReportsList from '../reports_list/ReportsList';\nimport { variants } from '../framer motion/variants';\n\nconst P5page = () => {\n\n    return (\n        <motion.div className=\"p5page\"\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\">\n\n            <div className=\"todo text-center\">\n                <h4 className=\"todo__title\">  <span role=\"img\" aria-label=\"jsx-a11y/accessible-emoji\">🚀</span> In the next update  <span role=\"img\" aria-label=\"jsx-a11y/accessible-emoji\">🚀</span></h4>\n                <h5>Ever tried making art with algorithm !! No? </h5>\n                <h5>P5 js implementations coming soon :)</h5>\n                <h5>Full Screen Mode</h5>\n                <h5>Art with recursion</h5>\n                <h5>Add <span role=\"img\" aria-label=\"jsx-a11y/accessible-emoji\">🎵</span> during the sorting </h5>\n                <h5>implement other Sorting and Searching algorithms</h5>\n                <h5>About me <span role=\"img\" aria-label=\"jsx-a11y/accessible-emoji\">👦</span> and this project</h5>\n                <h5>Populate Articles section with something more interesting <span role=\"img\" aria-label=\"jsx-a11y/accessible-emoji\">🚀</span></h5>\n            </div>\n            <Feedback />\n            <ReportsList />\n\n        </motion.div>\n    );\n};\n\nexport default P5page;","import React from 'react';\nimport Sidebar from './sidebar/Sidebar'\nimport './App.css';\nimport Landing from './landing/Landing';\nimport { Switch, Route, useLocation } from 'react-router-dom'\nimport Sorting from './sorting/Sorting';\nimport PathFinder from './path-finder/PathFinder';\nimport Articles from './articles/Articles';\nimport { AnimatePresence } from 'framer-motion';\nimport P5page from './p5js/P5page';\n\nfunction App() {\n  const location = useLocation();\n  return (\n\n    <div className=\"app\">\n      <Sidebar />\n      <AnimatePresence exitBeforeEnter>\n        <Switch location={location} key={location.key}>\n          <Route path=\"/sorting\">\n            <Sorting />\n          </Route>\n          <Route path=\"/path-finder\">\n            <PathFinder />\n          </Route>\n          <Route path=\"/algorithm-art\">\n            <P5page />\n          </Route>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </AnimatePresence>\n      <Articles />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'react-toastify/dist/ReactToastify.css'\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\n  <Router>\n    <App />\n  </Router>\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}